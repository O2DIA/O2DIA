\name{O2DIAsteady}
\alias{O2DIAsteady}
\title{
  Steady-state solution of O2 dynamics in the sediment.
}
\description{

  \code{O2DIAsteady} finds the steady-state solution of the O2DIA model.
}
\usage{
  O2DIAsteady (parms = list(), yini = NULL, Grid = NULL, times = 0,
     Temperature = 10, PAR0 = 1000, Waterheight = 0.01,
     Tfunction = "Q10")
  }
\arguments{

  \item{parms}{ A list with parameter values, Available parameters can be listed using function \link{O2DIAparms}.

    See details.
  }

  \item{yini }{Initial guess of the steady-state solution.
  }
  
 \item{Grid}{ If specified: either an object, as returned by \code{setup.grid.1D} from the package \code{ReacTran}, 
   a vector of length 301 with the transport distances (from mid to mid of layers, upper interface = diffusive boundary layer), 
   or one number with the constant layer thickness. 
   If \code{NULL}, it is defined as \code{setup.grid.1D(x.up = -x_DBL, dx.1 = c( x_DBL/20, 1e-6), N = c(20, N-20), L = c(DBL, x_down))}, where x_DBL and x_down are parameters defining the thickness of the diffusive boundary layer and the length of the modelede sediment. This means there are 20 layers defined in the diffusive boundary layer, the remainder in the sediment, with initial thickness = 1e-6 m, and increasing with depth for 300-20 layers.  
  } 
  \item{times}{ the time for which to estimate the steady-state condition; can be one value, or a vector (in which case only the first value will be used).
  }
  \item{Temperature}{ the temperature forcing function, units of [dgC]. Can be one value, a vector (in which case the first value will be used), a function that takes time as input, or a two-columned data.frame or matrix. In the latter case, it is assumed that the first column represents time, and the data series will be used to approximate the value for the input \code{times}. When a function, then the value will be generated by calling the function for the input \code{times}.
  }
  \item{PAR0}{  forcing function for the photosynthetically active radiation at the sediment-water  interface, units of [uEinst/m2/s]. Can be one value, a vector (in which case the first value will be used), a function that takes time as input, or a two-columned data.frame or matrix. In the latter case, it is assumed that the first column represents time, and the data series will be used to approximate the value for the input \code{times}. When a function, then the value will be generated by calling the function for the input \code{times}.
  }  
  \item{Waterheight}{  forcing function for water height, units of [m]. This has an effect on the sediment-water exchange fluxes based on water height being > 0 or = 0. Can be one value, a vector (in which case the first value will be used), a function that takes time as input, or a two-columned data.frame or matrix. In the latter case, it is assumed that the first column represents time, and the data series will be used to approximate the value for the input \code{times}. When a function, then the value will be generated by calling the function for the input \code{times}.
  }   
  \item{Tfunction}{ How the temperature effect on rates needs to be estimated. When "Q10", a Q10-formulation (exponential) will be used, as driven by parameters \code{Q10_min, Q10_odureox, Q10_mpbprod, Q10_basalresp, Q10_photoresp}. If a different name, a cardinal function will be used, driven by parameters \code{Tmax_MPBprod, Tmin_MPBprod, Topt_MPBprod, Tmax_min, Tmin_min, Topt_min, Tmax_reox, Tmin_reox, Topt_reox, Tmax_basalresp, Tmin_basalresp, Topt_basalresp, Tmax_photoresp, Tmin_photoresp, Topt_photoresp}
  }

}

\value{
 \code{O2DIAsteady} returns an object of class \code{O2DIAstd}, and of class \code{steady1D}, as generated by the solvers from R-package \code{rootSolve} (\link{steady.1D}[rootSolve]).

It contains, a.o. the elements:
 \itemize{
   \item \code{y}, with the state variables at steady-state (\code{O2, ODU}).
   \item \code{O2SWIflux, O2deepflux, ODUSWIflux, ODUdeepflux}, the sediment-water interface (SWI) and deep (burial) fluxes, in mol O2/m2/d.
   \item \code{O2consumption, O2prod, O2min, O2odureox, O2basalresp, O2photoresp, ODUconsumption}, the vertical profiles of total oxygen consumption, of oxygen production, of growth respiration+mineralistion, of ODU reoxidation, basal respiration, photorespiration and ODU reoxidation, all in mol O2/m3 liquid/d.
   \item \code{rODUreox, rMPBprod, rbasalresp} the actual rates of processes (temperature dependent).
   \item \code{Biodist}, the profile of microphytobenthos biomass, in molC/m3solid
   \item \code{Light, kext, PI}, the light profile (uEinst/m2/s), the light extinction coefficient profile (/m), the relative photosynthesis profile (light limitation).
    \item \code{Totalcons, Totalmin, Totalbasalresp, Totalphotoresp, Totalodureox, Totalprod}, the vertically integrated rates of total oxygen consumption, of growth respiration+mineralistion, of basal respiration, of photorespiration, of ODU reoxidation, and of oxygen production, all in mol O2/m2/d.
    \item \code{Temperature, PAR0, Waterheight}, the forcing functions.
  }

 The meaning and units of these elements can be assessed via the functions:
 
 \code{O2DIAsvar()}, \code{O2DIA1D()}, \code{O2DIA0D()}. See \link{O2DIA0D}.
  
}

\author{
  Karline Soetaert, Qi Liu
}

\details{
  To solve the model, a steady-state solver from package rootSolve
  (here we used \code{\link[rootSolve]{steady.1D}}) is
  used. 
}


\examples{

#===========================================
# Show parameter values
#===========================================

  O2DIAparms()
  par(mar = c(3,3,3,3))

#===========================================
# Runs with different light conditions
#===========================================

  out  <- O2DIAsteady()   # Default is PAR0=1000
  out2 <- O2DIAsteady(PAR0 = 0)
  out3 <- O2DIAsteady(PAR0 = 100)
  
  plot(out, out2, out3, lty = 1)

  O2DIAbudgetO2(out, out2, out3)  

#===========================================
# Derive the PI curve
#===========================================

# run the model with high light value
  out  <- O2DIAsteady(PAR0 = 2000) 
  
  par(mfrow = c(1,3))
  plot(out, which = "Light", 
       ylab = "depth, m", xlab = "uEinst/m2/s", 
       mfrow = NULL)
  plot(out, which = "PI",
       ylab = "depth, m", 
       xlab = "fraction of maximum PS" , 
       mfrow = NULL)
  with(out, plot(Light, PI), 
       main = "PI curve", type = "l")
  
#===========================================
# Temperature
#===========================================

  out  <- O2DIAsteady()   # Default is Temperature=10
  out2 <- O2DIAsteady(Temperature = 0)
  out3 <- O2DIAsteady(Temperature = 30)
  
  plot(out, out2, out3, lty = 1)

  O2DIAbudgetO2(out, out2, out3)  

#===========================================
# Derive the temperature dependency 
#===========================================

# run the model with different values of temperature
# keep the values of the rates
  T.seq  <- 0:50
  select <- c("rODUreox", "rMPBprod", "rbasalresp")
  
  rates <- NULL
  for (T in T.seq){
    res <- O2DIAsteady(Temperature = T, Tfunction = "cardinal")
    rates <- rbind(rates, c(T, res[select]))
  }
  
  rates <- as.data.frame(rates)
  names(rates) <- c("temperature", select)
  
  par(mfrow = c(1, 2))
  plot(rates$temperature, rates$rMPBprod, type = "l", 
       xlab = "temperature", ylab = "/day",
       main = "rMPBprod")
  
  plot(rates$temperature, rates$rbasalresp, type = "l", 
       xlab = "temperature", ylab = "/day",
       main = "rbasalresp")
       
#===========================================
# Run with different production rates
#===========================================
  RES <- NULL
  rProd.seq <- seq(from = 0, to = 100, by = 5)
  
}
\references{
  to be added
}

\keyword{ utilities }
